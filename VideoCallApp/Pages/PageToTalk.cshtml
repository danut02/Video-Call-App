@page
@model VideoCallApp.Pages.PageToTalkModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Talking page";
}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.3.0/font/bootstrap-icons.css">
<style>
    body {
        background-color: #e5c7ca;
    }

    h2 {
        text-align: center;
    }

    button {
        width: 240px;
        margin-left: 850px;
        margin-bottom: 40px;
        border-radius: 10px;
        border-width: 0;
    }

    #b1 {
        width: 100px;
        border-radius: 15px;
        border-width: 0;
        background-color: green;
        color: whitesmoke;
        margin-bottom: 40px;
        transition: 1s;
        margin-top: 20px;
    }

    #b2 {
        width: 100px;
        border-radius: 15px;
        border-width: 0;
        background-color: red;
        color: whitesmoke;
        margin-bottom: 40px;
        transition: 1s;
        position: relative;
        top: -245px;
        left: 180px;
    }

    .b3 {
        width: 100px;
        border-radius: 15px;
        border-width: 0;
        background-color: red;
        color: whitesmoke;
        margin-bottom: 40px;
        transition: 1s;
        position: relative;
        top: -113px;
        left: -210px;
    }

    .b4 {
        width: 100px;
        border-radius: 15px;
        border-width: 0;
        background-color: red;
        color: whitesmoke;
        margin-bottom: 40px;
        transition: 1s;
        position: relative;
        top: -180px;
    }

    #b1:hover {
        background-color: darkgreen;
        font-size: larger;
    }

    #b2:hover {
        background-color: darkred;
        font-size: larger;
    }

    .b3:hover {
        background-color: darkgreen;
        font-size: larger;
    }

    .b4:hover {
        background-color: darkgreen;
        font-size: larger;
    }

    img {
        margin-left: 250px;
    }

    #containerbutt {
        margin-left: -210px;
    }
    #container{
        border:2px red solid;
        display:grid;
        grid-template-columns: auto auto;
        align-items: center;
        align-content:space-evenly;
        margin-left:15%;
        width:75%;
        margin-bottom:15%;
    }
    #container #LocalCamera{
        width:250px;
        height:250px;
    }
    #container #ReceiverCamera {
        width: 250px;
        height: 250px;
    }
</style>
<div id="container">
    <div id="containerLocal">
        <video id="LocalCamera" autoplay></video>
        <video id="LocalAudio" autoplay></video>
    </div>
    <div id="containerReceiver">
        <video id="ReceiverCamera" autoplay></video>
    </div>
</div>
<div id="containerbutt">
    <button id="b1">Start Call</button>
    <button onclick="microphoneOnOff()" id="buttonMic" class="b3 bi-mic"></button>
    <button onclick="camOnOff()"id="buttonCamera" class="b4 bi-camera"></button>
    <button onclick="endCall()"id="b2">End Call</button>
    <button onclick="createTheAnswer()" id="theAnswerButton">Create an answer</button>
</div>
<select id="devicesCamera">
</select>
<select id="devicesAudio">
</select>
<p>The offer generated by you</p>
<textarea id="offerHere"></textarea>
<p>The answer generated for you</p>
<textarea id="answerHere"></textarea>
<button id="FinalAnswerGenerated">The answer stuck to your camera</button>
<script type="text/javascript">
    const configuration = {
        iceServers: [
            {
                urls: ['stun:stun.l.google.com:19302', 'stun:stun1.l.google.com:19302']
            }
        ]
    }
    var buttonFinalAnswer = document.getElementById("FinalAnswerGenerated");
    var buttonMic = document.getElementById("buttonMic");
    var buttonCam = document.getElementById("buttonCamera");
    var local = document.getElementById("LocalAudio");
    var localCam = document.getElementById("LocalCamera");
    var localStream;
    var Receiver = document.getElementById("ReceiverCamera");
    var listDevicesCamera = document.getElementById("devicesCamera");
    var listDevicesAudio = document.getElementById("devicesAudio");
    var start = document.getElementById("b1");
    var offerContent = document.getElementById("offerHere");
    var answerContent = document.getElementById("answerHere");
    var theButtonForAnswers = document.getElementById('theAnswerButton');
    var peerConnection = new RTCPeerConnection(configuration);
    var counterMic = 0;
    var counterCam = 0;
    window.addEventListener("load", init());
    function init() {
        localStream = navigator.mediaDevices.getUserMedia({
            video: true,
            audio: false
        });
    }
    buttonMic.onclick = microphoneOnOff;
    function microphoneOnOff() {
        counterMic++;
        if (counterMic == 1) {
            window.navigator.mediaDevices.getUserMedia({
                video: false,
                audio: true
            }).
                then((stream) => { 
                    console.log("Gotta ask for microphone and is on", stream);
                    local.srcObject = stream; }).
                catch((error) => { console.log("Doesn't work", error) });
        }
        if (counterMic == 2) {
            window.navigator.mediaDevices.getUserMedia({
                video:false,
                audio:true
            }).
                then((stream) => {
                    console.log("Gotta ask for microphone and is off", stream);
                    local.srcObject = null;
                }).
                catch((error) => { console.log("Doesn't work", error) });
            counterMic = 0;
        }
    }
    buttonCam.onclick = camOnOff;
    function camOnOff() {
        counterCam++;
        if (counterCam == 1) {
            window.navigator.mediaDevices.getUserMedia({
                video: true,
                audio:false
            }).
                then((stream) => {
                    console.log("Gotta ask for microphone and is on", stream);
                    localCam.srcObject = stream;
                }).
                catch((error) => { console.log("Doesn't work", error) });
        }
        if (counterCam == 2) {
            window.navigator.mediaDevices.getUserMedia({
                video: true,
                audio: false
            }).
                then((stream) => {
                    console.log("Gotta ask for microphone and is off", stream);
                    localCam.srcObject = null;
                }).
                catch((error) => { console.log("Doesn't work", error) });
            counterCam = 0;
        }
    }
    window.addEventListener("load", theList());
    window.addEventListener("load", theAudioList());
    function theList() {
            getConnectedDevices('videoinput');
    }
    function theAudioList() {
        getConnectedDevices("audioinput");
    }
    function getConnectedDevices(type) {
        navigator.mediaDevices.enumerateDevices()
            .then(devices => {
                if (type === 'videoinput') {
                    const filtered = devices.filter(device => device.kind === type);
                    const theDevices = document.getElementById("devicesCamera");
                    theDevices.innerHTML = '';
                    filtered.map(theItem => {
                        var theOption = document.createElement('option');
                        theOption.label = theItem.label;
                        theOption.value = theItem.deviceId;
                        theDevices.appendChild(theOption);
                    });
                }
                if (type === "audioinput") {
                    const filtered = devices.filter(device => device.kind === type);
                    const theDevices = document.getElementById("devicesAudio");
                    theDevices.innerHTML = '';
                    filtered.map(theItem => {
                        var theOption = document.createElement('option');
                        theOption.label = theItem.label;
                        theOption.value = theItem.deviceId;
                        theDevices.appendChild(theOption);
                    });
                }
            });
    }
    async function getTheListOfCameras(type) {
        var devices = await window.navigator.mediaDevices.enumerateDevices();
        return devices.filter(device => device.kind === type);
    }
    window.navigator.mediaDevices.addEventListener("devicechange", event => {
        const audio = getConnectedDevices('audioinput');
        changeListAudio(audio);
    })
    window.navigator.mediaDevices.addEventListener("devicechange", event => {
        const camere = getConnectedDevices('videoinput');
        changeList(camere);
    });
    function changeList(cameras) {
        const theDevices = document.getElementById("devicesCamera");
        theDevices.innerHTML = "";
        cameras.map(camera => {
            const cameraOption = document.createElement('option');
            cameraOption.label = camera.label;
            cameraOption.value = camera.deviceId;
            theDevices.add(cameraOption);
        });
    }
    function changeListAudio(audio) {
        const theDevices = document.getElementById("devicesAudio");
        theDevices.innerHTML = "";
        audio.map(audio => {
            const audioOption = document.createElement('option');
            audioOption.label = audio.label;
            audioOption.value = audio.deviceId;
            theDevices.add(audioOption);
        });
    }
    listDevicesCamera.addEventListener("change", function () {
        const camere = getTheListOfCameras('videoinput');
        const theCamera = this.value;
        camere.
            then(devices => {
                for (var i = 0; i < devices.length; i++) {
                    if (devices[i].deviceId == theCamera) {
                        const constraints = {
                            'audio': false,
                            'video': {
                                'deviceId': devices[i].deviceId,
                                'width': 250,
                                'height': 250,
                            }
                        };
                        window.navigator.mediaDevices.getUserMedia(constraints).then(stream => {
                            localCam.srcObject = stream;
                        });
                    }
                }
            });
    });
    listDevicesAudio.addEventListener("change", function () {
        const audio = getTheListOfCameras('audioinput');
        const theAudio = this.value;
        audio.
            then(devices => {
                for (var i = 0; i < devices.length; i++) {
                    if (devices[i].deviceId == theAudio) {
                        const constraints = {
                            'audio': { 'echoCancellation': true },
                            'video': false
                        }
                        window.navigator.mediaDevices.getUserMedia(constraints).then((stream) => {
                            local.srcObject = stream;
                        });
                    }
                }
            });
    });
    start.onclick = makeCall;
    async function makeCall() {
        peerConnection = new RTCPeerConnection(configuration);
        var remoteStream = new MediaStream();
        Receiver.srcObject = remoteStream;
        localCam.srcObject.getTracks().forEach(track => {
            peerConnection.addTrack(track, localCam.srcObject);
        });
        peerConnection.ontrack = async (event) => {
            event.streams[0].getTracks().forEach((track) => {
                remoteStream.addTrack(track);
            });
        };
        peerConnection.onicecandidate = async (event) => {
            if (event.candidate) {
                offerContent.value = JSON.stringify(peerConnection.localDescription);
            }
        };
        const offer = await peerConnection.createOffer();
        await peerConnection.setLocalDescription(offer);
        offerContent.value = JSON.stringify(offer);
    }
    theButtonForAnswers.onclick = createAnswer;
    async function createAnswer(){
        peerConnection = new RTCPeerConnection(configuration);
        var remoteStream = new MediaStream();
        Receiver.srcObject = remoteStream;
        localCam.srcObject.getTracks().forEach(track => {
            peerConnection.addTrack(track, localCam.srcObject);
        });
        peerConnection.ontrack = async (event) => {
            event.streams[0].getTracks().forEach((track) => {
                remoteStream.addTrack(track);
            });
        };
        peerConnection.onicecandidate = async (event) => {
            if (event.candidate) {
                offerContent.value = JSON.stringify(peerConnection.localDescription);
            }
        };
        if (offerContent.value == "") {
            return window.alert('Error');
        }
        let theOffer = offerContent.value;
        theOffer = JSON.parse(theOffer);
        await peerConnection.setRemoteDescription(theOffer);
        const answer = await peerConnection.createAnswer();
        await peerConnection.setLocalDescription(answer);
        answerContent.value = JSON.stringify(answer);
    }
    buttonFinalAnswer.onclick = addAnswer;
    async function addAnswer() {
        var contentFromTheAnswer = answerContent.value;
        if (contentFromTheAnswer == "") return window.alert("Error");
        contentFromTheAnswer = JSON.parse(contentFromTheAnswer);
        if(!peerConnection.currentRemoteDescription){
            peerConnection.setRemoteDescription(contentFromTheAnswer);
        }
    }
</script>
